/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package spirit;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.GradientPaint;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.ui.ApplicationFrame;
import org.jfree.ui.RefineryUtilities;

/**
 *
 * @author Elcot
 */
public class Visualization extends javax.swing.JFrame {

    /**
     * Creates new form Visualization
     */
    public Visualization() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 0, 51));

        jLabel1.setFont(new java.awt.Font("Andalus", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Visualization of Topic Person Interaction");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(334, 334, 334))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jButton1.setText("Visualization of Topic Person Interaction (SVM)");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setText("KNN");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Naive Bayes");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("View Execution Time Graph");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(258, 258, 258)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 672, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(130, 130, 130)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 595, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        jTextArea1.setText(" ");
        
        ArrayList a=ConvolutionTreeKernel.interactiveSegments;
     //System.out.println("interactiveSegments.size(): "+a.size());
        
        ArrayList accuratepair=new ArrayList();
        ArrayList allPersonNames=new ArrayList();
        for(int i=0;i<a.size();i++)
        {
            String tree=a.get(i).toString().trim(); 
         //System.out.println("tree: "+tree);
            String sp[]=tree.trim().split("#");
            String pa=" ";
            for(int j=0;j<sp.length;j++)
            {
               //System.out.println(" sp hsdkndvjbjvd "+sp[j]);
                String spc[]=sp[j].trim().split("\\/");
                if(spc[1].trim().equals("NR"))
                {
                    pa=pa+spc[0].trim()+"-";
                    int co=0;
                    for(int k=0;k<allPersonNames.size();k++)
                    {
                        String s=allPersonNames.get(k).toString().trim();
                        if(s.trim().contains(spc[0].trim()))
                        {
                            co=1;
                        }
                        if(spc[0].trim().contains(s.trim()))
                        {
                            allPersonNames.set(k,spc[0].trim());
                            co=1;
                        }
                    }
                    if(co!=1)
                    {
                        allPersonNames.add(spc[0].trim());
                    }
                }
            }
            String pair=pa.substring(0,pa.lastIndexOf('-'));
         //System.out.println("pair: "+pair);
            if(!(accuratepair.contains(pair.trim())))
            {
                accuratepair.add(pair.trim());
            }
        }
     //System.out.println("accuratepair: "+accuratepair);
     //System.out.println("allPersonNames: "+allPersonNames);
        
        JOptionPane.showMessageDialog(this,"SVM Topic Person Interaction Visualized Successfully!");
        
        for(int k1=0;k1<allPersonNames.size();k1++)
        {
            String pername=allPersonNames.get(k1).toString().trim(); 
            
            ArrayList norep=new ArrayList();
            
            for(int j=0;j<accuratepair.size();j++)
            {
                String sp[]=accuratepair.get(j).toString().trim().split("-");
                if(pername.trim().equals(sp[0].trim()))
                {
                    int co=0;
                    for(int k=0;k<norep.size();k++)
                    {
                        String s=norep.get(k).toString().trim();
                        if(s.trim().contains(sp[1].trim()))
                        {
                            co=1;
                        }
                        if(sp[1].trim().contains(s.trim()))
                        {
                            norep.set(k,sp[1].trim());
                            co=1;
                        }
                    }
                    if(co!=1)
                    {
                        norep.add(sp[1].trim());
                    }
                }
                else if(pername.trim().equals(sp[1].trim()))
                {
                    int co=0;
                    for(int k=0;k<norep.size();k++)
                    {
                        String s=norep.get(k).toString().trim();
                        if(s.trim().contains(sp[0].trim()))
                        {
                            co=1;
                        }
                        if(sp[0].trim().contains(s.trim()))
                        {
                            norep.set(k,sp[0].trim());
                            co=1;
                        }
                    }
                    if(co!=1)
                    {
                        norep.add(sp[0].trim());
                    }
                }
                else if(pername.trim().contains(sp[0].trim()))
                {
                    int co=0;
                    for(int k=0;k<norep.size();k++)
                    {
                        String s=norep.get(k).toString().trim();
                        if(s.trim().contains(sp[1].trim()))
                        {
                            co=1;
                        }
                        if(sp[1].trim().contains(s.trim()))
                        {
                            norep.set(k,sp[1].trim());
                            co=1;
                        }
                    }
                    if(co!=1)
                    {
                        norep.add(sp[1].trim());
                    }
                }
                else if(pername.trim().contains(sp[1].trim()))
                {
                    int co=0;
                    for(int k=0;k<norep.size();k++)
                    {
                        String s=norep.get(k).toString().trim();
                        if(s.trim().contains(sp[0].trim()))
                        {
                            co=1;
                        }
                        if(sp[0].trim().contains(s.trim()))
                        {
                            norep.set(k,sp[0].trim());
                            co=1;
                        }
                    }
                    if(co!=1)
                    {
                        norep.add(sp[0].trim());
                    }
                }
            }
            String inter=" ";
            for(int i=0;i<norep.size();i++)
            {
                inter=inter+norep.get(i).toString().trim()+", ";
            }
            String interactions=inter.substring(0,inter.lastIndexOf(','));            
            jTextArea1.append(pername.trim()+" --> "+interactions.trim()+"\n");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        jTextArea2.setText(" ");
        
        ArrayList a=ConvolutionTreeKernel.interactiveSegments1;
     //System.out.println("interactiveSegments1.size(): "+a.size());
        
        ArrayList accuratepair=new ArrayList();
        ArrayList allPersonNames=new ArrayList();
        for(int i=0;i<a.size();i++)
        {
            String tree=a.get(i).toString().trim(); 
         //System.out.println("tree: "+tree);
            String sp[]=tree.trim().split("#");
            String pa=" ";
            for(int j=0;j<sp.length;j++)
            {
             //System.out.println(" sp hsdkndvjbjvd "+sp[j]);
                String spc[]=sp[j].trim().split("\\/");
                if(spc[1].trim().equals("NR"))
                {
                    pa=pa+spc[0].trim()+"-";
                    int co=0;
                    for(int k=0;k<allPersonNames.size();k++)
                    {
                        String s=allPersonNames.get(k).toString().trim();
                        if(s.trim().contains(spc[0].trim()))
                        {
                            co=1;
                        }
                        if(spc[0].trim().contains(s.trim()))
                        {
                            allPersonNames.set(k,spc[0].trim());
                            co=1;
                        }
                    }
                    if(co!=1)
                    {
                        allPersonNames.add(spc[0].trim());
                    }
                }
            }
            String pair=pa.substring(0,pa.lastIndexOf('-'));
         //System.out.println("pair: "+pair);
            if(!(accuratepair.contains(pair.trim())))
            {
                accuratepair.add(pair.trim());
            }
        }
     //System.out.println("accuratepair: "+accuratepair);
     //System.out.println("allPersonNames: "+allPersonNames);
        
        JOptionPane.showMessageDialog(this,"KNN Topic Person Interaction Visualized Successfully!");
        
        for(int k1=0;k1<allPersonNames.size();k1++)
        {
            String pername=allPersonNames.get(k1).toString().trim(); 
            
            ArrayList norep=new ArrayList();
            
            for(int j=0;j<accuratepair.size();j++)
            {
                String sp[]=accuratepair.get(j).toString().trim().split("-");
                if(pername.trim().equals(sp[0].trim()))
                {
                    int co=0;
                    for(int k=0;k<norep.size();k++)
                    {
                        String s=norep.get(k).toString().trim();
                        if(s.trim().contains(sp[1].trim()))
                        {
                            co=1;
                        }
                        if(sp[1].trim().contains(s.trim()))
                        {
                            norep.set(k,sp[1].trim());
                            co=1;
                        }
                    }
                    if(co!=1)
                    {
                        norep.add(sp[1].trim());
                    }
                }
                else if(pername.trim().equals(sp[1].trim()))
                {
                    int co=0;
                    for(int k=0;k<norep.size();k++)
                    {
                        String s=norep.get(k).toString().trim();
                        if(s.trim().contains(sp[0].trim()))
                        {
                            co=1;
                        }
                        if(sp[0].trim().contains(s.trim()))
                        {
                            norep.set(k,sp[0].trim());
                            co=1;
                        }
                    }
                    if(co!=1)
                    {
                        norep.add(sp[0].trim());
                    }
                }
                else if(pername.trim().contains(sp[0].trim()))
                {
                    int co=0;
                    for(int k=0;k<norep.size();k++)
                    {
                        String s=norep.get(k).toString().trim();
                        if(s.trim().contains(sp[1].trim()))
                        {
                            co=1;
                        }
                        if(sp[1].trim().contains(s.trim()))
                        {
                            norep.set(k,sp[1].trim());
                            co=1;
                        }
                    }
                    if(co!=1)
                    {
                        norep.add(sp[1].trim());
                    }
                }
                else if(pername.trim().contains(sp[1].trim()))
                {
                    int co=0;
                    for(int k=0;k<norep.size();k++)
                    {
                        String s=norep.get(k).toString().trim();
                        if(s.trim().contains(sp[0].trim()))
                        {
                            co=1;
                        }
                        if(sp[0].trim().contains(s.trim()))
                        {
                            norep.set(k,sp[0].trim());
                            co=1;
                        }
                    }
                    if(co!=1)
                    {
                        norep.add(sp[0].trim());
                    }
                }
            }
            String inter=" ";
            for(int i=0;i<norep.size();i++)
            {
                inter=inter+norep.get(i).toString().trim()+", ";
            }
            String interactions=inter.substring(0,inter.lastIndexOf(','));            
            jTextArea2.append(pername.trim()+" --> "+interactions.trim()+"\n");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        jTextArea3.setText(" ");
        String Result=" ";
        ArrayList a=ConvolutionTreeKernel.interactiveSegments2;
     //System.out.println("interactiveSegments2.size(): "+a.size());
        
        ArrayList accuratepair=new ArrayList();
         ArrayList interativesummary=new ArrayList();
      //   interativesummary.add(" "); interativesummary.add(" "); interativesummary.add(" "); interativesummary.add(" "); interativesummary.add(" "); interativesummary.add(" "); interativesummary.add(" "); interativesummary.add(" "); interativesummary.add(" "); interativesummary.add(" "); interativesummary.add(" ");
        ArrayList allPersonNames=new ArrayList();
        for(int i=0;i<a.size();i++)
        {
            String tree=a.get(i).toString().trim(); 
         //System.out.println("tree: "+tree);
            
            String sp[]=tree.trim().split("#");
            String pa=" ";
            for(int j=0;j<sp.length;j++)
            {
               //System.out.println(" sp hsdkndvjbjvd "+sp[j]);
                String spc[]=sp[j].trim().split("\\/");
                if(spc[1].trim().equals("NR"))
                {
                    pa=pa+spc[0].trim()+"-";
                    int co=0;
                    for(int k=0;k<allPersonNames.size();k++)
                    {
                        String s=allPersonNames.get(k).toString().trim();
                        if(s.trim().contains(spc[0].trim()))
                        {
                            co=1;
                        }
                        if(spc[0].trim().contains(s.trim()))
                        {
                            allPersonNames.set(k,spc[0].trim());
                            co=1;
                        }
                    }
                    if(co!=1)
                    {
                        allPersonNames.add(spc[0].trim());
                    }
               
                }
            }
            String pair=pa.substring(0,pa.lastIndexOf('-'));
           
         //System.out.println("pair: "+pair);
             
              if(!(accuratepair.contains(pair.trim())))
                        {
                        accuratepair.add(pair.trim());
                        }
        }
        
        
          
      
      
        String interativesummary1[]=new String[Homepage.topicDocuments.size()];
          for(int jj1=0;jj1<interativesummary1.length;jj1++)
       {
           interativesummary1[jj1]=" ";
       }
        for(int jj1=0;jj1<interativesummary1.length;jj1++)
       {
           String interactive=" ";
              interactive=interactive+"\n\n"+" SUMMARY OF DOCUMENT "+(jj1+1)+" \n\n";
              interativesummary1[jj1]=interactive;
            
                for(int hh=0;hh<SegmentStructure.RITreee.size();hh++)
                {
                String documentdata=SegmentStructure.RITreee.get(hh).toString().replaceAll("/VBN", " ").replaceAll("#", " ").replaceAll("/VBZ", " ").replaceAll("/NR", " ").replaceAll("/NNS", " ").replaceAll("/VBG", " ").replaceAll("/VBD", " ").replaceAll("/NNP", " ").replaceAll("/NN", " ");
                 String lines[]=documentdata.split("-->");
                // System.out.println("\n\n THIS IS INTERACTIVE STATEMENT TO COMAPRE \n\n"+lines[0]);
               if(lines[1].contains("inner") || lines[1].contains("surrounding"))
                    {
                                String parts[]=lines[0].split(" ");
                              
                                 String sentence[]=Homepage.topicDocuments.get(jj1).toString().replaceAll("\\. ","\n").split("\n");
                                 //System.out.println("DOCUMENT "+(jj1+1));
//                                for(int f=0;f<sentence.length;f++)
//                                        {
//                                              System.out.println("\n"+sentence[f]);
//                                        }
                              for(int ggf=0;ggf<sentence.length;ggf++)
                            {
                                ArrayList status=new ArrayList();
                               for(int hhj=0;hhj<parts.length;hhj++)
                                {
                                    if(sentence[ggf].contains(parts[hhj]))
                                    {
                                        status.add("1");
                                    }
                                    else
                                    {
                                        status.add("0");
                                    }
                                }
                            
                                Double perc=0.0,count=0.0;
                                int total=status.size();
                                for(int m=0;m<status.size();m++)
                                {
                                    if(status.get(m).equals("1"))
                                    {
                                        count=count+1;
                                    }
                                }

                                perc=count/total;
  
                                perc=perc*100;

                                  if(perc<80)
                            {
                                 
                            }
                            else{
                                   
                           
                                     //   System.out.println("SENTENCE IN DOCUMENT    : "+jj1+"  "+sentence[ggf]);
                                     //    System.out.println("STATUS ARRAY   : "+jj1+"  "+status);
                                      if(!interativesummary1[jj1].contains(sentence[ggf]))
                                      {
                                    interativesummary1[jj1]=interativesummary1[jj1]+sentence[ggf]+" . \n";
                                      }
                                  }
                                }

                    }
                   
                
                }
                interativesummary.add(interactive);
        
       }
   
     //System.out.println("allPersonNames: "+allPersonNames);
        JOptionPane.showMessageDialog(this,"Naive Bayes Topic Person Interaction Visualized Successfully!");
        
        for(int k1=0;k1<allPersonNames.size();k1++)
        {
            String pername=allPersonNames.get(k1).toString().trim(); 
            
            ArrayList norep=new ArrayList();
            
            for(int j=0;j<accuratepair.size();j++)
            {
                String sp[]=accuratepair.get(j).toString().trim().split("-");
                if(pername.trim().equals(sp[0].trim()))
                {
                    int co=0;
                    for(int k=0;k<norep.size();k++)
                    {
                        String s=norep.get(k).toString().trim();
                        if(s.trim().contains(sp[1].trim()))
                        {
                            co=1;
                        }
                        if(sp[1].trim().contains(s.trim()))
                        {
                            norep.set(k,sp[1].trim());
                            co=1;
                        }
                    }
                    if(co!=1)
                    {
                        norep.add(sp[1].trim());
                    }
                }
                else if(pername.trim().equals(sp[1].trim()))
                {
                    int co=0;
                    for(int k=0;k<norep.size();k++)
                    {
                        String s=norep.get(k).toString().trim();
                        if(s.trim().contains(sp[0].trim()))
                        {
                            co=1;
                        }
                        if(sp[0].trim().contains(s.trim()))
                        {
                            norep.set(k,sp[0].trim());
                            co=1;
                        }
                    }
                    if(co!=1)
                    {
                        norep.add(sp[0].trim());
                    }
                }
                else if(pername.trim().contains(sp[0].trim()))
                {
                    int co=0;
                    for(int k=0;k<norep.size();k++)
                    {
                        String s=norep.get(k).toString().trim();
                        if(s.trim().contains(sp[1].trim()))
                        {
                            co=1;
                        }
                        if(sp[1].trim().contains(s.trim()))
                        {
                            norep.set(k,sp[1].trim());
                            co=1;
                        }
                    }
                    if(co!=1)
                    {
                        norep.add(sp[1].trim());
                    }
                }
                else if(pername.trim().contains(sp[1].trim()))
                {
                    int co=0;
                    for(int k=0;k<norep.size();k++)
                    {
                        String s=norep.get(k).toString().trim();
                        if(s.trim().contains(sp[0].trim()))
                        {
                            co=1;
                        }
                        if(sp[0].trim().contains(s.trim()))
                        {
                            norep.set(k,sp[0].trim());
                            co=1;
                        }
                    }
                    if(co!=1)
                    {
                        norep.add(sp[0].trim());
                    }
                }
            }
            String inter=" ";
            for(int i=0;i<norep.size();i++)
            {
                inter=inter+norep.get(i).toString().trim()+", ";
            }
            String interactions=inter.substring(0,inter.lastIndexOf(','));            
            jTextArea3.append(pername.trim()+" --> "+interactions.trim()+"\n");
        }
        for(int gg=0;gg<interativesummary1.length;gg++)
            {
                jTextArea3.append(interativesummary1[gg]+"\n");
            }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        final BarChartDemo1 demo1 = new BarChartDemo1("Execution Time");
        demo1.pack();
        RefineryUtilities.centerFrameOnScreen(demo1);
        demo1.setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Visualization.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Visualization.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Visualization.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Visualization.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Visualization().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    // End of variables declaration//GEN-END:variables

    class BarChartDemo1 extends ApplicationFrame 
    {

    /**
     * Creates a new demo instance.
     *
     * @param title  the frame title.
     */
        
    public BarChartDemo1(final String title) {

        super(title);

        final CategoryDataset dataset = createDataset();
        final JFreeChart chart = createChart(dataset);
        final ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new Dimension(500, 270));
        setContentPane(chartPanel);        
    }

    /**
     * Returns a sample dataset.
     * 
     * @return The dataset.
     */
    private CategoryDataset createDataset() {
        
        
        // create the dataset...
        final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        
        try
        {                                                                            
            dataset.addValue((double)ConvolutionTreeKernel.svmm,"SVM","SVM");                                                        
            dataset.addValue((double)ConvolutionTreeKernel.knn,"KNN","KNN"); 
            dataset.addValue((double)ConvolutionTreeKernel.nb,"Naive Bayes","Naive Bayes"); 
        }
        catch(Exception e1)
        {
            e1.printStackTrace();
        }                                                                             
                     
        return dataset;        
    }
    
    /**
     * Creates a sample chart.
     * 
     * @param dataset  the dataset.
     * 
     * @return The chart.
     */
    private JFreeChart createChart(final CategoryDataset dataset) {
        
        // create the chart...
        final JFreeChart chart = ChartFactory.createBarChart(
            "Comparison",         // chart title
            "Algorithm",               // domain axis label
            "Execution Time (in MS)",                  // range axis label
            dataset,                  // data
            PlotOrientation.VERTICAL, // orientation
            true,                     // include legend
            true,                     // tooltips?
            false                     // URLs?
        );

        // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...

        // set the background color for the chart...
        chart.setBackgroundPaint(Color.white);

        // get a reference to the plot for further customisation...
        final CategoryPlot plot = chart.getCategoryPlot();
        plot.setBackgroundPaint(Color.lightGray);
        plot.setDomainGridlinePaint(Color.white);
        plot.setRangeGridlinePaint(Color.white);

        // set the range axis to display integers only...
        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        //rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

        // disable bar outlines...
        final BarRenderer renderer = (BarRenderer) plot.getRenderer();
        renderer.setDrawBarOutline(false);
        
        // set up gradient paints for series...
        final GradientPaint gp0 = new GradientPaint(
            0.0f, 0.0f, Color.blue, 
            0.0f, 0.0f, Color.lightGray
        );
        final GradientPaint gp1 = new GradientPaint(
            0.0f, 0.0f, Color.green, 
            0.0f, 0.0f, Color.lightGray
        );
        final GradientPaint gp2 = new GradientPaint(
            0.0f, 0.0f, Color.red, 
            0.0f, 0.0f, Color.lightGray
        );
        renderer.setSeriesPaint(0, gp0);
        renderer.setSeriesPaint(1, gp1);
        renderer.setSeriesPaint(2, gp2);

        final CategoryAxis domainAxis = plot.getDomainAxis();
        domainAxis.setCategoryLabelPositions(
            CategoryLabelPositions.createUpRotationLabelPositions(Math.PI / 6.0)
        );
        // OPTIONAL CUSTOMISATION COMPLETED.
        
        return chart;
        
    }
    
    // ****************************************************************************
    // * JFREECHART DEVELOPER GUIDE                                               *
    // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
    // * to purchase from Object Refinery Limited:                                *
    // *                                                                          *
    // * http://www.object-refinery.com/jfreechart/guide.html                     *
    // *                                                                          *
    // * Sales are used to provide funding for the JFreeChart project - please    * 
    // * support us so that we can continue developing free software.             *
    // ****************************************************************************
    
    /**
     * Starting point for the demonstration application.
     *
     * @param args  ignored.
     */    

}
}
