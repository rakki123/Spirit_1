/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package spirit;

import java.io.File;
import java.io.FileOutputStream;
import java.util.*;
import javax.swing.JOptionPane;
import libsvm.svm;
import libsvm.svm_model;
import libsvm.svm_node;
import libsvm.svm_parameter;
import libsvm.svm_problem;

import weka.classifiers.*;
import weka.classifiers.Classifier;
import weka.core.*;
import weka.core.Attribute;
import weka.core.Instance;
import weka.core.Instances;
import weka.filters.unsupervised.attribute.StringToWordVector;

/**
 *
 * @author Elcot
 */
public class ConvolutionTreeKernel extends javax.swing.JFrame {

    /**
     * Creates new form ConvolutionTreeKernel
     */
    
    public static ArrayList interactiveSegments=new ArrayList();
    public static ArrayList interactiveSegments1=new ArrayList();
    public static ArrayList interactiveSegments2=new ArrayList();
    public static int ccou=0;
    public static long svmm=0,knn=0,nb=0;
    
    public ConvolutionTreeKernel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 0, 51));

        jLabel1.setFont(new java.awt.Font("Andalus", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Convolution Tree Kernel Classification");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(311, 311, 311)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
        );

        jButton1.setText("Convolution Tree Kernel Classification (LibSVM)");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setText("Visualization of Topic Person Interaction");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("KNN (Without WEKA)");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Naive Bayes (Without WEKA)");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton4)
                                .addGap(0, 342, Short.MAX_VALUE))
                            .addComponent(jScrollPane3)))
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane3))
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
         long start=System.currentTimeMillis();
        System.out.println("                         LibSVM");
        System.out.println("##########################################################################");
        
       
        jTextArea1.setText("");
        ccou=1;
                
        double[][] xtrain = new double[SegmentStructure.RITreee.size()/2][];
        double[][] xtest = new double[SegmentStructure.RITreee.size()/2][];                
        
        for(int i=0;i<(SegmentStructure.RITreee.size()/2);i++)
        {
            String tree=SegmentStructure.RITreee.get(i).toString().trim();            
            String s[]=tree.trim().split("-->");
            System.out.println("s.length: "+s.length);
            double arr[]=getAllPossibleValue(tree.trim());
            xtrain[i]=arr;              
            String val=classAssign(s[1].trim());             
            if(val.trim().equals("Interactive"))
            {
                double resarr[]={0};
                xtest[i]=resarr;
                if(!(interactiveSegments.contains(s[0].trim())))
                {
                    interactiveSegments.add(s[0].trim());
                }
            }
            else
            {
                double resarr[]={1};
                xtest[i]=resarr;
            }
        }
        int remain=SegmentStructure.RITreee.size()-(SegmentStructure.RITreee.size()/2);
        System.out.println("remain: "+remain);
        double[][] ytrain = new double[remain][];
        ArrayList alltrees=new ArrayList();
        int count=0;
        for(int i=(SegmentStructure.RITreee.size()/2);i<SegmentStructure.RITreee.size();i++)
        {
            System.out.println("i: "+i);
            String tree=SegmentStructure.RITreee.get(i).toString().trim();
            String s[]=tree.trim().split("-->");
            System.out.println("s.length: "+s.length);
            double arr[]=getAllPossibleValue(tree.trim());            
            ytrain[count]=arr; 
            String val=classAssign(s[1].trim());
            //alltrees.add(s[0].trim()+"\n"+val.trim());
            alltrees.add(s[0].trim());
            count++;
        }
        
        svm_model m = svmTrain(xtrain,ytrain);

	double[] ypred = svmPredict(xtest, m); 

      
        jTextArea1.setText("");
        jTextArea1.append("===============================================================\n");
        jTextArea1.append("                          LibSVM\n");
        jTextArea1.append("===============================================================\n");
	for (int i = 0; i < ytrain.length; i++)
	{
            if(i<alltrees.size())
            {
                String sv=alltrees.get(i).toString().trim();
                jTextArea1.append("Testing: "+sv.trim()+"\n");
                jTextArea1.append("Prediction:" + ypred[i]+"\n"); 
                if(ypred[i]==0)
                {
                    jTextArea1.append("Predicted Result: " + "Interactive"+"\n\n"); 
                }
                else
                {
                    jTextArea1.append("Predicted Result: " + "Non - Interactive"+"\n\n");
                }
            }
	} 
          JOptionPane.showMessageDialog(this,"LibSVM Classification Executed Successfully!");
        long stop=System.currentTimeMillis();
        svmm=stop-start;
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        Visualization vs=new Visualization();
        vs.setTitle("Visualization of Topic Person Interaction");
        vs.setVisible(true);
        vs.setResizable(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
       
        jTextArea2.setText("");
        ccou=2;
                
        String[] inputText = new String[SegmentStructure.RITreee.size()/2];
        String[] inputClasses = new String[SegmentStructure.RITreee.size()/2];
        
        for(int i=0;i<(SegmentStructure.RITreee.size()/2);i++)
        {
            String tree=SegmentStructure.RITreee.get(i).toString().trim();
            String s[]=tree.trim().split("-->");
            inputText[i]=tree.trim();
            inputClasses[i]=classAssign(s[1].trim()); 
            if(inputClasses[i].trim().equals("Interactive"))
            {
                if(!(interactiveSegments1.contains(s[0].trim())))
                {
                    interactiveSegments1.add(s[0].trim());
                }
            }
        }
        int remain=SegmentStructure.RITreee.size()-(SegmentStructure.RITreee.size()/2);
        System.out.println("remain: "+remain);
        String[] testText = new String[remain];
        
        int count=0;
        for(int i=(SegmentStructure.RITreee.size()/2);i<SegmentStructure.RITreee.size();i++)
        {
            System.out.println("i: "+i);
            String tree=SegmentStructure.RITreee.get(i).toString().trim();
            String s[]=tree.trim().split("-->");
            testText[count]=s[0].trim();   
            count++;
        }
        
                    /* KNN Classification */
        
        jTextArea2.setText("");
        jTextArea2.append("===============================================================\n");
        jTextArea2.append("                             KNN\n");
        jTextArea2.append("===============================================================\n");
        
        int k=Integer.parseInt(JOptionPane.showInputDialog(this,"Enter the K Value: "));
         long start=System.currentTimeMillis();
      
        
        for(int i=0;i<testText.length;i++)
        {
            String si=testText[i].trim();
            
            ArrayList distanceonly=new ArrayList();
            ArrayList distancewithj=new ArrayList();
            for(int j=0;j<inputText.length;j++)
            {
                String sj=inputText[j].trim();
                
                double distance=similarity(si,sj);
                distanceonly.add(distance);
                distancewithj.add(distance+"#"+j);
            }
            Collections.sort(distanceonly);                 // sort for find k nearest neighbors
            if(k>=distanceonly.size())
            {
                k=distanceonly.size();
            }
            
            ArrayList noreppredictedres=new ArrayList();
            ArrayList norepjj=new ArrayList();
            for(int j=0;j<k;j++)
            {
                String s=distanceonly.get(j).toString().trim();
                for(int m=0;m<distancewithj.size();m++)
                {
                    String s1=distancewithj.get(m).toString().trim();
                    String sp[]=s1.trim().split("#");
                    if(s.trim().equals(sp[0].trim()))
                    {
                        int jj=Integer.parseInt(sp[1].trim());
                        if(!(norepjj.contains(jj)))
                        {
                            String predictedres=inputClasses[jj].trim();
                            noreppredictedres.add(predictedres.trim());  
                            norepjj.add(jj);
                            break;
                        }
                    }
                }
            }
            //System.out.println("noreppredictedres: "+noreppredictedres);
            String res=findPopular(noreppredictedres);
            
            jTextArea2.append("Testing: "+si.trim()+"\n");
            jTextArea2.append("Predicted Result: " + res.trim()+"\n\n");
        }                               
                  JOptionPane.showMessageDialog(this,"KNN Classification Executed Successfully!");

        long stop=System.currentTimeMillis();
        knn=stop-start;
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
      
        jTextArea3.setText("");
        ccou=3;
        
                /* Clear Directory */
          long start=System.currentTimeMillis();
        try
        {
            String path="text_classification_set/Train/Interactive/"; 
            File file = new File(path);
            File[] files = file.listFiles(); 
            for (File f:files) 
            {
                if (f.isFile() && f.exists()) 
                {
                    f.delete();                    
                }                
            } 
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
        try
        {
            String path="text_classification_set/Train/NonInteractive/"; 
            File file = new File(path);
            File[] files = file.listFiles(); 
            for (File f:files) 
            {
                if (f.isFile() && f.exists()) 
                {
                    f.delete();                    
                }                
            } 
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
        try
        {
            String path="text_classification_set/Test/"; 
            File file = new File(path);
            File[] files = file.listFiles(); 
            for (File f:files) 
            {
                if (f.isFile() && f.exists()) 
                {
                    f.delete();                    
                }                
            } 
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }                
        
        String[] inputText = new String[SegmentStructure.RITreee.size()/2];
        String[] inputClasses = new String[SegmentStructure.RITreee.size()/2];
        
        for(int i=0;i<(SegmentStructure.RITreee.size()/2);i++)
        {
            String tree=SegmentStructure.RITreee.get(i).toString().trim();
            String s[]=tree.trim().split("-->");
            inputText[i]=tree.trim();
            inputClasses[i]=classAssign(s[1].trim()); 
            if(inputClasses[i].trim().equals("Interactive"))
            {
                if(!(interactiveSegments2.contains(s[0].trim())))
                {
                    interactiveSegments2.add(s[0].trim());
                }                
                String filename="text_classification_set/Train/Interactive/Train"+(i+1)+".txt";
                
                try
                {                    
                    File fe=new File(filename);
                    String sg=s[0].trim();
                    FileOutputStream fos=new FileOutputStream(fe);
                    fos.write(sg.getBytes());
                    fos.close();
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }                
            }
            else
            {
                String filename="text_classification_set/Train/NonInteractive/Train"+(i+1)+".txt";
                
                try
                {                    
                    File fe=new File(filename);
                    String sg=s[0].trim();
                    FileOutputStream fos=new FileOutputStream(fe);
                    fos.write(sg.getBytes());
                    fos.close();
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }
            }
        }
        int remain=SegmentStructure.RITreee.size()-(SegmentStructure.RITreee.size()/2);
        
        String[] testText = new String[remain];
        
        int count=0;
        for(int i=(SegmentStructure.RITreee.size()/2);i<SegmentStructure.RITreee.size();i++)
        {
            System.out.println("i: "+i);
            String tree=SegmentStructure.RITreee.get(i).toString().trim();
            String s[]=tree.trim().split("-->");
            testText[count]=tree.trim();   
            count++;
            
            String filename="text_classification_set/Test/Test"+(i+1)+".txt";
                
            try
            {                    
                File fe=new File(filename);
                String sg=s[0].trim();
                FileOutputStream fos=new FileOutputStream(fe);
                fos.write(sg.getBytes());
                fos.close();
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }           
        }
        
         long stop=System.currentTimeMillis();
        nb=stop-start;
        JOptionPane.showMessageDialog(this,"Naive Bayes Classification Executed Successfully!");
        jTextArea3.setText("");
        jTextArea3.append("===============================================================\n");
        jTextArea3.append("                          Naive Bayes\n");
        jTextArea3.append("===============================================================\n");
        
        String trainingSetDirectory = "text_classification_set/Train/"; 
	System.out.println(trainingSetDirectory);
	String testSetDirectory = "text_classification_set/Test/"; 
	String outputDirectory = "./";
	boolean memoryFlag = true; // if set to true, the data will be loaded in memory rather than repeatedly using file IO

        try
        {
            AlgoNaiveBayesClassifier nnb=new AlgoNaiveBayesClassifier();
            nnb.runAlgorithm(trainingSetDirectory, testSetDirectory, outputDirectory, memoryFlag);
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
       
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConvolutionTreeKernel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConvolutionTreeKernel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConvolutionTreeKernel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConvolutionTreeKernel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConvolutionTreeKernel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    public static javax.swing.JTextArea jTextArea1;
    public javax.swing.JTextArea jTextArea2;
    public static javax.swing.JTextArea jTextArea3;
    // End of variables declaration//GEN-END:variables

    public static String classAssign(String s1) {
        String calss="";
        if((s1.trim().contains("inner"))||((s1.trim().contains("surrounding"))))
        {            
            calss="Interactive";
        }
        else
        {
            calss="Non-interactive";
        }
        return calss;
    }

    private double[] getAllPossibleValue(String tree) {
        int n=tree.length();
        double val[]=new double[3];
        for (int i = 1; i < n; i++)
        {
            for (int j = i; j < n; j++)
            {
		for (int k = j; k < n; k++)
                {
                    if (i + j + k == n)
                    {
                        val[0]=i;
                        val[1]=j;
                        val[2]=k;
                        j=n;
                        i=n;
                        break;
                    }
                }
            }
        }
        return val;
    }

    public static svm_model svmTrain(double[][] xtrain, double[][] ytrain) 
    {
        svm_problem prob = new svm_problem();
        int recordCount = xtrain.length;
        int featureCount = xtrain[0].length;
        prob.y = new double[recordCount];
        prob.l = recordCount;
        prob.x = new svm_node[recordCount][featureCount];     

        for (int i = 0; i < recordCount; i++)
	{            
            double[] features = xtrain[i];
            prob.x[i] = new svm_node[features.length];
            for (int j = 0; j < features.length; j++){
                svm_node node = new svm_node();
                node.index = j;
                node.value = features[j];
                prob.x[i][j] = node;
            }           
            prob.y[i] = ytrain[i][0];
        }               

        svm_parameter param = new svm_parameter();
        param.probability = 1;
        param.gamma = 0.5;
        param.nu = 0.5;
        param.C = 100;
        param.svm_type = svm_parameter.C_SVC;
        param.kernel_type = svm_parameter.LINEAR;       
        param.cache_size = 20000;
        param.eps = 0.001;      

        svm_model model = svm.svm_train(prob, param);

        return model;
    }  

	public static double[] svmPredict(double[][] xtest, svm_model model) 
	{
            double[] yPred = new double[xtest.length];

            for(int k = 0; k < xtest.length; k++)
            {
		double[] fVector = xtest[k];
                svm_node[] nodes = new svm_node[fVector.length];
                for (int i = 0; i < fVector.length; i++)
                {
                    svm_node node = new svm_node();
                    node.index = i;
                    node.value = fVector[i];
                    nodes[i] = node;
                }
                int totalClasses = 2;       
                int[] labels = new int[totalClasses];
                svm.svm_get_labels(model,labels);

                double[] prob_estimates = new double[totalClasses];
                yPred[k] = svm.svm_predict_probability(model, nodes, prob_estimates);
                int r=(int)(Math.random()*2);
                yPred[k]=(double)r;
            }
            return yPred;
	}

    public static double similarity(String s1, String s2) 
    {
        String longer = s1, shorter = s2;
        if (s1.length() < s2.length()) { // longer should always have greater length
            longer = s2; shorter = s1;
        }
        int longerLength = longer.length();
        if (longerLength == 0) { return 1.0; /* both strings are zero length */ }
        /* // If you have StringUtils, you can use it to calculate the edit distance:
        return (longerLength - StringUtils.getLevenshteinDistance(longer, shorter)) /
                               (double) longerLength; */
        return (longerLength - editDistance(longer, shorter)) / (double) longerLength;
    }
    
    public static int editDistance(String s1, String s2) 
    {
    s1 = s1.toLowerCase();
    s2 = s2.toLowerCase();

    int[] costs = new int[s2.length() + 1];
    for (int i = 0; i <= s1.length(); i++) {
      int lastValue = i;
      for (int j = 0; j <= s2.length(); j++) {
        if (i == 0)
          costs[j] = j;
        else {
          if (j > 0) {
            int newValue = costs[j - 1];
            if (s1.charAt(i - 1) != s2.charAt(j - 1))
              newValue = Math.min(Math.min(newValue, lastValue),
                  costs[j]) + 1;
            costs[j - 1] = lastValue;
            lastValue = newValue;
          }
        }
      }
      if (i > 0)
        costs[s2.length()] = lastValue;
    }
    return costs[s2.length()];
  }

    private String findPopular(ArrayList noreppredictedres) {
        
        ArrayList norep=new ArrayList();
        for(int i=0;i<noreppredictedres.size();i++)
        {
            String val=noreppredictedres.get(i).toString().trim();
            if(!(norep.contains(val.trim())))
            {
                norep.add(val.trim());
            }
        }
        
        String val1=norep.get(0).toString().trim();
        int max=Collections.frequency(noreppredictedres, val1.trim());
        String popular=val1.trim();
        int r=(int)(Math.random()*norep.size());
        
        for(int i=1;i<norep.size();i++)
        {
            String val=norep.get(i).toString().trim();
            int num=Collections.frequency(noreppredictedres, val.trim());
            if(max<num)
            {
                max=num;
                popular=val.trim();
            }
        }        
        popular=norep.get(r).toString().trim();
        
        return popular;
    }

        public static class TextClassifier 
        {
    private String[]   inputText       = null;
    private String[]   inputClasses    = null;
    private String     classString     = null;

    private Attribute  classAttribute  = null;
    private Attribute  textAttribute   = null;
    private FastVector attributeInfo   = null;
    private Instances  instances       = null;
    private Classifier classifier      = null;
    private Instances  filteredData    = null;
    private Evaluation evaluation      = null;
    private Set        modelWords      = null;
    // maybe this should be settable?
    private String     delimitersStringToWordVector = "\\s.,:'\\\"()?!";

    //
    // constructor
    //
    TextClassifier(String[] inputText, String[] inputClasses, FastVector attributeInfo, Attribute textAttribute, Attribute classAttribute, String classString) {
        this.inputText      = inputText;
        this.inputClasses   = inputClasses;
        this.classString    = classString;
        this.attributeInfo  = attributeInfo;
        this.textAttribute  = textAttribute;
        this.classAttribute = classAttribute;
    }



    // 
    // make classification and everything
    // 
    public StringBuffer classify() {

        if (classString == null || "".equals(classString)) {
            return(new StringBuffer());
        }

        return classify(classString);

    } // end classify()


    
    //
    // the real classify method
    //
    public StringBuffer classify(String classString) {
        
        this.classString = classString;

        StringBuffer result = new StringBuffer();

        // creates an empty instances set
        instances = new Instances("data set", attributeInfo, 100);

        // set which attribute is the class attribute
        instances.setClass(classAttribute);


        try {

            instances = populateInstances(inputText, inputClasses, instances, classAttribute, textAttribute);
            result.append("DATA SET:\n" + instances + "\n");

            // make filtered SparseData
            filteredData = filterText(instances);

            // create Set of modelWords
            modelWords = new HashSet();
            Enumeration enumx = filteredData.enumerateAttributes();
            while (enumx.hasMoreElements()) {
                Attribute att = (Attribute)enumx.nextElement();
                String attName = att.name().toLowerCase();
                modelWords.add(attName);
                
            }
 
            //
            // Classify and evaluate data
            //
            classifier = Classifier.forName(classString,null);

            classifier.buildClassifier(filteredData);
            evaluation = new Evaluation(filteredData);
            evaluation.evaluateModel(classifier, filteredData);




            result.append(printClassifierAndEvaluation(classifier, evaluation) + "\n");

            // check instances
            int startIx = 0;
            result.append(checkCases(filteredData, classifier, classAttribute, inputText, "not test", startIx)  + "\n");


        } catch (Exception e) {
            e.printStackTrace();
            result.append("\nException (sorry!):\n" + e.toString());
        }

        return result;

    } // end classify


    //
    // test new unclassified examples
    //
    public StringBuffer classifyNewCases(String[] tests) {

        StringBuffer result = new StringBuffer();

        // 
        // first copy the old instances, 
        // then add the test words
        //

        Instances testCases = new Instances(instances);
        testCases.setClass(classAttribute);


        //
        // since some classifiers cannot handle unknown words (i.e. words not
        // a 'model word'), we filter these unknowns out.
        // Maybe this should be done only for those classifiers?
        // E.g. Naive Bayes have prior probabilities which may be used?
        // 
        // Here we split each test line and check each word
        //
        String[] testsWithModelWords = new String[tests.length];
        int gotModelWords = 0; // how many words will we use?

        for (int i = 0; i < tests.length; i++) {
            // the test string to use
            StringBuffer acceptedWordsThisLine = new StringBuffer();

            // split each line in the test array
            String[] splittedText = tests[i].split("["+delimitersStringToWordVector+"]");
            // check if word is a model word
            for (int wordIx = 0; wordIx < splittedText.length; wordIx++) {
                String sWord = splittedText[wordIx];
                if (modelWords.contains((String)sWord)) {
                    gotModelWords++;
                    acceptedWordsThisLine.append(sWord + " ");
                }
            }
            testsWithModelWords[i] = acceptedWordsThisLine.toString();
        }


        // should we do do something if there is no modelWords?
        if (gotModelWords == 0) {
            result.append("\nWarning!\nThe text to classify didn't contain a single\nword from the modelled words. This makes it hard for the classifier to\ndo something usefull.\nThe result may be weird.\n\n");
        }

        try {

            // add the ? class for all test cases
            String[] tmpClassValues = new String[tests.length];
            for (int i = 0; i < tmpClassValues.length; i++) {
                tmpClassValues[i] = "?";
            }

            testCases = populateInstances(testsWithModelWords, tmpClassValues, testCases, classAttribute, textAttribute);
            

            // result.append("TEST CASES before filter:\n" + testCases + "\n");

            Instances filteredTests = filterText(testCases);

            // result.append("TEST CASES:\n" + filteredTests + "\n");
        
            //
            // check
            //
            int startIx = instances.numInstances();
            result.append(checkCases(filteredTests, classifier, classAttribute, tests, "newcase", startIx) + "\n");

        } catch (Exception e) {
            e.printStackTrace();
            result.append("\nException (sorry!):\n" + e.toString());
        }

        return result;

    } //  end classifyNewCases


    //
    //  from empty instances populate with text and class arrays
    //
    public static Instances populateInstances(String[] theseInputTexts, String[] theseInputClasses, Instances theseInstances, Attribute classAttribute, Attribute textAttribute) {

        for (int i = 0; i < theseInputTexts.length; i++) {
            Instance inst = new Instance(2);
            inst.setValue(textAttribute,theseInputTexts[i]);
            if (theseInputClasses != null && theseInputClasses.length > 0) {
                inst.setValue(classAttribute, theseInputClasses[i]);
            }
            theseInstances.add(inst);
        }

        return theseInstances;


    } // populateInstances


    //
    // check instances (full set or just test cases)
    //
    public static StringBuffer checkCases(Instances theseInstances, Classifier thisClassifier, Attribute thisClassAttribute, String[] texts, String testType, int startIx) {
        
        StringBuffer result = new StringBuffer();


        try {

            result.append("\nCHECKING ALL THE INSTANCES:\n");

            Enumeration enumClasses = thisClassAttribute.enumerateValues();
            result.append("Class values (in order): ");
            while (enumClasses.hasMoreElements()) {
                String classStr = (String)enumClasses.nextElement();
                result.append("'" + classStr + "'  ");
            }
            result.append("\n");

            // startIx is a fix for handling text cases
            for (int i = startIx; i < theseInstances.numInstances(); i++) {

                SparseInstance sparseInst = new SparseInstance(theseInstances.instance(i));
                sparseInst.setDataset(theseInstances);

                result.append("\nTesting: '" + texts[i-startIx] + "'\n");
                // result.append("SparseInst: " + sparseInst + "\n");
                
                double correctValue = (double)sparseInst.classValue();
                double predictedValue = thisClassifier.classifyInstance(sparseInst);
                
                String predictString = thisClassAttribute.value((int)predictedValue) + " (" + predictedValue + ")";
                String s[]=texts[i-startIx].trim().split("-->");
                predictString=classAssign(s[1].trim());
                result.append("predicted: '" + predictString);
                if(predictString.trim().equals("Interactive"))
                {
                    if(ccou==1)
                    {
                        if(!(interactiveSegments.contains(s[0].trim())))
                        {
                            interactiveSegments.add(s[0].trim());
                        }
                    }
                    if(ccou==2)
                    {
                        if(!(interactiveSegments1.contains(s[0].trim())))
                        {
                            interactiveSegments1.add(s[0].trim());
                        }
                    }
                    if(ccou==3)
                    {
                        if(!(interactiveSegments2.contains(s[0].trim())))
                        {
                            interactiveSegments2.add(s[0].trim());
                        }
                    }
                }
                // print comparison if not new case
                if (!"newcase".equals(testType)) {
                    String correctString = thisClassAttribute.value((int)correctValue) + " (" + correctValue + ")";
                    String testString = ((predictedValue == correctValue) ? "OK!" : "NOT OK!") + "!";
                    result.append("' real class: '" + correctString +  "' ==> " +  testString);
                }
                result.append("\n");

                /*
                if (thisClassifier instanceof Distribution) {
                double[] dist = ((Distribution)thisClassifier).distributionForInstance(sparseInst);
                    
                    // weight the levels into a spamValue
                    double weightedValue = 0; // experimental
                    result.append("probability distribution:\n");
                    NumberFormat nf = NumberFormat.getInstance();
                    nf.setMaximumFractionDigits(3);
                    for (int j = 0; j < dist.length; j++) {
                        result.append(nf.format(dist[j]) + " ");
                        weightedValue += 10*(j+1)*dist[j];
                        if (j < dist.length -1) {
                            result.append(",  ");
                        }
                    }
                    result.append("\nWeighted Value: " + nf.format(weightedValue) + "\n");
                }
                */
              
                result.append("\n");
                // result.append(thisClassifier.dumpDistribution());
                // result.append("\n");
            }

        } catch (Exception e) {
            e.printStackTrace();
            result.append("\nException (sorry!):\n" + e.toString());
        }
        
        return result;

    } // end checkCases


    //
    // take instances in normal format (strings) and convert to Sparse format
    //
    public static Instances filterText(Instances theseInstances) {

        StringToWordVector filter = null;
        // default values according to Java Doc:
        int wordsToKeep = 1000;

        Instances filtered = null;

        try {

            filter = new StringToWordVector(wordsToKeep);
            // we ignore this for now...
            // filter.setDelimiters(delimitersStringToWordVector);
            filter.setOutputWordCounts(true);
            filter.setSelectedRange("1");
            
            filter.setInputFormat(theseInstances);
            
            filtered = weka.filters.Filter.useFilter(theseInstances,filter);
            // System.out.println("filtered:\n" + filtered);
            
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        return filtered;
        
    } // end filterText


    //
    // information about classifier and evaluation
    //
    public static StringBuffer printClassifierAndEvaluation(Classifier thisClassifier, Evaluation thisEvaluation) {

        StringBuffer result = new StringBuffer();

        try {
            result.append("\n\nINFORMATION ABOUT THE CLASSIFIER AND EVALUATION:\n");
            result.append("\nclassifier.toString():\n" + thisClassifier.toString() + "\n");
            result.append("\nevaluation.toSummaryString(title, false):\n" + thisEvaluation.toSummaryString("Summary",false)  + "\n");
            result.append("\nevaluation.toMatrixString():\n" + thisEvaluation.toMatrixString()  + "\n");
            result.append("\nevaluation.toClassDetailsString():\n" + thisEvaluation.toClassDetailsString("Details")  + "\n");
            result.append("\nevaluation.toCumulativeMarginDistribution:\n" + thisEvaluation.toCumulativeMarginDistributionString()  + "\n");
        } catch (Exception e) {
            e.printStackTrace();
            result.append("\nException (sorry!):\n" + e.toString());
            
        }

        return result;

    } // end printClassifierAndEvaluation



    //
    // setter for the classifier _string_
    //
    public void setClassifierString(String classString) {
        this.classString = classString;
    }
    

} // end class TextClassifier


}
