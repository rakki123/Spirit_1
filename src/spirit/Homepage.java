/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package spirit;

import java.io.*;
import java.util.ArrayList;
import javax.swing.*;
import opennlp.tools.namefind.NameFinderME;
import opennlp.tools.namefind.TokenNameFinderModel;
import opennlp.tools.tokenize.Tokenizer;
import opennlp.tools.tokenize.TokenizerME;
import opennlp.tools.tokenize.TokenizerModel;
import opennlp.tools.util.InvalidFormatException;
import opennlp.tools.util.Span;

/**
 *
 * @author Elcot
 */
public class Homepage extends javax.swing.JFrame {

    /**
     * Creates new form Homepage
     */
    public static String dataset;
    public static ArrayList topicDocuments=new ArrayList();
       public static ArrayList CS=new ArrayList(); 
    public static ArrayList allPersonNames=new ArrayList();
     public static ArrayList allsentence=new ArrayList();
    public Homepage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 102, 0));

        jLabel1.setFont(new java.awt.Font("Andalus", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Main Frame");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(570, 570, 570)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        jButton1.setText("Load all Topic Document Dataset");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton3.setText("Candidate Segment Generation");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jButton2.setText("Segment Structure Generalization");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 660, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 660, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 667, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 21, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try
        {
            File folder = new File("Topic Document Dataset/");
            String[] eachfilename = folder.list();
            
            String ds="";
            for (int i = 0; i < eachfilename.length; i++) 
            {
                String filename=folder+"/"+eachfilename[i].trim();
                jTextArea1.append("=====================================\n     Document - "+(i+1)+"\n=====================================\n");
                File fe=new File(filename);		
		FileInputStream fis=new FileInputStream(fe);
		byte data[]=new byte[fis.available()];
		fis.read(data);
		fis.close();
		String str1=new String(data);
                topicDocuments.add(str1.trim());
		jTextArea1.append(str1.trim()+"\n");
                ds=ds+str1.trim()+"\n";
            }
            dataset=ds.substring(0,ds.lastIndexOf('\n'));                                    
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String dataset=Homepage.dataset.trim();
        String sp[]=dataset.trim().replaceAll("\\. ","\n").split("\n");
        PersonNameExtraction toi = new PersonNameExtraction();
        ArrayList topicpersonpair=new ArrayList();
        ArrayList norep=new ArrayList();
        for(int i=0;i<sp.length;i++)
        {
            allsentence.add(sp[i]);
            String candidatesegment=sp[i].trim().replaceAll("[^\\w\\s]", "");
            toi.tokenization(candidatesegment);
            String names = toi.namefind(toi.Tokens).trim();
            if(names.trim().contains("\n"))
            {
                String pn[]=names.trim().split("\n");
                for(int j=0;j<pn.length;j++)
                {
                    for(int k=0;k<pn.length;k++)
                    {
                        if(j!=k)
                        {
                            String topicperspair=pn[j].trim()+"-"+pn[k].trim();

                            if(!(norep.contains(topicperspair.trim())))
                            {
                                System.out.println("Pair: "+topicperspair.trim());
                                topicpersonpair.add(topicperspair.trim());
                                norep.add(topicperspair.trim());
                                String revtopicperspair=pn[k].trim()+"-"+pn[j].trim();
                                norep.add(revtopicperspair.trim());

                                if(!(allPersonNames.contains(pn[j].trim())))
                                {
                                    allPersonNames.add(pn[j].trim());
                                }
                                if(!(allPersonNames.contains(pn[k].trim())))
                                {
                                    allPersonNames.add(pn[k].trim());
                                }
                                if(pn[j].trim().contains(" "))
                                {
                                    String pisplit[]=pn[j].trim().split(" ");
                                    for(int l=0;l<pisplit.length;l++)
                                    {
                                        if(!(allPersonNames.contains(pisplit[l].trim())))
                                        {
                                            allPersonNames.add(pisplit[l].trim());
                                        }
                                    }
                                }
                                if(pn[k].trim().contains(" "))
                                {
                                    String pisplit[]=pn[k].trim().split(" ");
                                    for(int l=0;l<pisplit.length;l++)
                                    {
                                        if(!(allPersonNames.contains(pisplit[l].trim())))
                                        {
                                            allPersonNames.add(pisplit[l].trim());
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        System.out.println("Topic Person Pair: "+topicpersonpair);

        System.out.println("===========================================================================");

        int cou=0;
        for(int i=0;i<Homepage.topicDocuments.size();i++)
        {
            String topicdoc=Homepage.topicDocuments.get(i).toString().trim();
            //System.out.println("topicdoc: "+topicdoc.trim());
            System.out.println("**********************"+i+"**********************");
            String c[]=topicdoc.trim().replaceAll("\\. ","\n").split("\n");

            for(int j=0;j<c.length;j++)
            {
                String c1=c[j].trim().replaceAll("[^\\w\\s]", "");
                System.out.println("c1: "+c1.trim());

                for(int k=0;k<topicpersonpair.size();k++)
                {
                    String pair=topicpersonpair.get(k).toString().trim();
                    String pa[]=pair.trim().split("-");
                    String pi=pa[0].trim();
                    String pj=pa[1].trim();

                    if((c1.contains(pi.trim()))&&(c1.contains(pj.trim())))
                    {
                        if(!(CS.contains(c1.trim())))
                        {
                            CS.add(c1.trim());
                            cou++;
                            jTextArea2.append("Candidate Segment - "+cou+": "+c1.trim()+"\n\n");
                            System.out.println("Mathched Pair: "+pair.trim());
                        }
                    }
                    else if((pi.trim().contains(" "))&&((pj.trim().contains(" "))))
                    {
                        String pisplit[]=pi.trim().split(" ");
                        String pjsplit[]=pj.trim().split(" ");

                        for(int l=0;l<pisplit.length;l++)
                        {
                            for(int m=0;m<pjsplit.length;m++)
                            {
                                if((c1.contains(pisplit[l].trim()))&&(c1.contains(pjsplit[m].trim())))
                                {
                                    if(!(CS.contains(c1.trim())))
                                    {
                                        CS.add(c1.trim());
                                        cou++;
                                        jTextArea2.append("Candidate Segment - "+cou+": "+c1.trim()+"\n\n");
                                        System.out.println("Mathched Pair: "+pair.trim());
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        System.out.println("/n/n/n/n/n: "+allsentence);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        SegmentStructure ss=new SegmentStructure();
        ss.setTitle("Segment Structure Generalization");
        ss.setVisible(true);
        ss.setResizable(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Homepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Homepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Homepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Homepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Homepage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
 public static class PersonNameExtraction {

    public String Tokens[];   
        public String namefind(String cnt[]) {
        InputStream is;
        TokenNameFinderModel tnf;
        NameFinderME nf;
        String sd = "";
        try {
            is = new FileInputStream(
                    "en-ner-person.bin");
            tnf = new TokenNameFinderModel(is);
            nf = new NameFinderME(tnf);

            Span sp[] = nf.find(cnt);
            
            //Printing the spans of the names in the sentence 
            //for(Span s: sp) 
                //System.out.println(cnt[s.getStart()]);
      
      

            String a[] = Span.spansToStrings(sp, cnt);
            StringBuilder fd = new StringBuilder();
            int l = a.length;
            System.out.println("l: "+l);

            for (int j = 0; j < l; j++) {
                fd = fd.append(a[j] + "\n");

            }
            sd = fd.toString();

        } catch (FileNotFoundException e) {

            e.printStackTrace();
        } catch (InvalidFormatException e) {

            e.printStackTrace();
        } catch (IOException e) {

            e.printStackTrace();
        }
        return sd;
    }

    public String orgfind(String cnt[]) {
        InputStream is;
        TokenNameFinderModel tnf;
        NameFinderME nf;
        String sd = "";
        try {
            is = new FileInputStream(
                    "en-ner-organization.bin");
            tnf = new TokenNameFinderModel(is);
            nf = new NameFinderME(tnf);
            Span sp[] = nf.find(cnt);
            String a[] = Span.spansToStrings(sp, cnt);
            StringBuilder fd = new StringBuilder();
            int l = a.length;

            for (int j = 0; j < l; j++) {
                fd = fd.append(a[j] + "\n");

            }

            sd = fd.toString();

        } catch (FileNotFoundException e) {

            e.printStackTrace();
        } catch (InvalidFormatException e) {

            e.printStackTrace();
        } catch (IOException e) {

            e.printStackTrace();
        }
        return sd;

    }


    public void tokenization(String tokens) {

        InputStream is;
        TokenizerModel tm;

        try {
            is = new FileInputStream("en-token.bin");
            tm = new TokenizerModel(is);
            Tokenizer tz = new TokenizerME(tm);
            Tokens = tz.tokenize(tokens);
            // System.out.println(Tokens[1]);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
}
